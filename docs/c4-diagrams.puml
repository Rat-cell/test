@startuml C4_Context_Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title Campus Locker System v2.0 - System Context Diagram

Person(student, "Student", "University student who needs to deposit/pickup parcels")
Person(delivery, "Delivery Person", "External delivery service dropping off parcels")
Person(admin, "System Administrator", "Manages users, lockers, and system configuration")

System(lockerSystem, "Campus Locker System", "Automated parcel management system with smart lockers for secure package delivery and pickup")

System_Ext(mailService, "Email Service", "MailHog SMTP service for notifications")
System_Ext(database, "Database System", "SQLite databases for data persistence")
System_Ext(monitoring, "Health Monitoring", "System health checks and status monitoring")

Rel(student, lockerSystem, "Deposits/picks up parcels, manages PINs")
Rel(delivery, lockerSystem, "Deposits parcels for students")
Rel(admin, lockerSystem, "Administers system, manages users and lockers")

Rel(lockerSystem, mailService, "Sends notifications", "SMTP")
Rel(lockerSystem, database, "Stores/retrieves data", "SQLite")
Rel(lockerSystem, monitoring, "Reports health status", "HTTP/JSON")

@enduml

' ===================================================================
' C4 CONTAINER DIAGRAM
' ===================================================================

@startuml C4_Container_Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Campus Locker System v2.0 - Container Diagram

Person(student, "Student", "University student")
Person(delivery, "Delivery Person", "External delivery service")
Person(admin, "Administrator", "System administrator")

System_Boundary(lockerSystem, "Campus Locker System") {
    Container(nginx, "Nginx Reverse Proxy", "Nginx 1.25", "Routes requests, handles SSL, security headers")
    Container(webapp, "Flask Web Application", "Python 3.12, Flask 3.0", "Main application with hexagonal architecture")
    Container(redis, "Redis Cache", "Redis 7.2", "Session storage and caching")
}

ContainerDb(mainDb, "Main Database", "SQLite", "Stores users, lockers, parcels, PINs")
ContainerDb(auditDb, "Audit Database", "SQLite", "Stores all system audit logs")
Container_Ext(mailhog, "MailHog", "Email Testing", "SMTP server for email notifications")

Rel(student, nginx, "Uses web interface", "HTTPS")
Rel(delivery, nginx, "Deposits parcels", "HTTPS")
Rel(admin, nginx, "Administers system", "HTTPS")

Rel(nginx, webapp, "Forwards requests", "HTTP")
Rel(webapp, redis, "Stores sessions", "Redis Protocol")
Rel(webapp, mainDb, "Reads/writes data", "SQLite")
Rel(webapp, auditDb, "Logs activities", "SQLite")
Rel(webapp, mailhog, "Sends emails", "SMTP")

@enduml

' ===================================================================
' C4 COMPONENT DIAGRAM - WEB APPLICATION
' ===================================================================

@startuml C4_Component_Diagram_WebApp
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Campus Locker System v2.0 - Web Application Components

Container(nginx, "Nginx Proxy", "Nginx", "Reverse proxy")
ContainerDb(mainDb, "Main Database", "SQLite", "Main data storage")
ContainerDb(auditDb, "Audit Database", "SQLite", "Audit logs")
Container(redis, "Redis Cache", "Redis", "Session storage")
Container_Ext(mailhog, "MailHog", "Email", "Email service")

Container_Boundary(webapp, "Flask Web Application") {
    ' Presentation Layer
    Component(webRoutes, "Web Routes", "Flask routes.py", "HTTP endpoints for web interface")
    Component(apiRoutes, "API Routes", "Flask api_routes.py", "RESTful API endpoints")
    Component(healthEndpoint, "Health Endpoint", "Flask health.py", "System health monitoring")
    
    ' Service Layer (Application)
    Component(parcelService, "Parcel Service", "Python class", "Parcel deposit/pickup operations")
    Component(lockerService, "Locker Service", "Python class", "Locker management operations")
    Component(pinService, "PIN Service", "Python class", "PIN generation and validation")
    Component(notificationService, "Notification Service", "Python class", "Email notifications")
    Component(adminService, "Admin Service", "Python class", "User and system administration")
    Component(auditService, "Audit Service", "Python class", "Activity logging and tracking")
    
    ' Business Layer (Domain)
    Component(parcelDomain, "Parcel Domain", "Python class", "Parcel business logic")
    Component(lockerDomain, "Locker Domain", "Python class", "Locker business rules")
    Component(pinDomain, "PIN Domain", "Python class", "PIN business logic")
    Component(notificationDomain, "Notification Domain", "Python class", "Notification rules")
    Component(adminDomain, "Admin Domain", "Python class", "Admin business logic")
    Component(auditDomain, "Audit Domain", "Python class", "Audit business rules")
    
    ' Persistence Layer
    Component(models, "Data Models", "SQLAlchemy ORM", "Database entity models")
    
    ' Adapter Layer
    Component(dbAdapter, "Database Adapter", "SQLAlchemy", "Database operations adapter")
    Component(emailAdapter, "Email Adapter", "SMTP client", "Email sending adapter")
    Component(auditAdapter, "Audit Adapter", "SQLite logger", "Audit logging adapter")
}

' External connections
Rel(nginx, webRoutes, "Routes web requests", "HTTP")
Rel(nginx, apiRoutes, "Routes API requests", "HTTP")
Rel(nginx, healthEndpoint, "Health checks", "HTTP")

' Presentation to Service Layer
Rel(webRoutes, parcelService, "Uses")
Rel(webRoutes, lockerService, "Uses")
Rel(webRoutes, pinService, "Uses")
Rel(webRoutes, adminService, "Uses")

Rel(apiRoutes, parcelService, "Uses")
Rel(apiRoutes, lockerService, "Uses")
Rel(apiRoutes, pinService, "Uses")
Rel(apiRoutes, notificationService, "Uses")
Rel(apiRoutes, auditService, "Uses")

' Service to Domain Layer
Rel(parcelService, parcelDomain, "Uses")
Rel(lockerService, lockerDomain, "Uses")
Rel(pinService, pinDomain, "Uses")
Rel(notificationService, notificationDomain, "Uses")
Rel(adminService, adminDomain, "Uses")
Rel(auditService, auditDomain, "Uses")

' Domain to Persistence Layer
Rel(parcelDomain, models, "Uses")
Rel(lockerDomain, models, "Uses")
Rel(pinDomain, models, "Uses")
Rel(adminDomain, models, "Uses")

' Persistence to Adapter Layer
Rel(models, dbAdapter, "Uses")
Rel(notificationDomain, emailAdapter, "Uses")
Rel(auditDomain, auditAdapter, "Uses")

' Adapter to External Systems
Rel(dbAdapter, mainDb, "Reads/writes", "SQLite")
Rel(emailAdapter, mailhog, "Sends emails", "SMTP")
Rel(auditAdapter, auditDb, "Writes logs", "SQLite")
Rel(dbAdapter, redis, "Cache operations", "Redis")

@enduml

' ===================================================================
' C4 COMPONENT DIAGRAM - DETAILED HEXAGONAL ARCHITECTURE
' ===================================================================

@startuml C4_Hexagonal_Architecture
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Campus Locker System v2.0 - Hexagonal Architecture Details

Container_Boundary(hexagon, "Hexagonal Architecture Core") {
    
    ' Primary Ports (Driving)
    Component(webPort, "Web Port", "HTTP Interface", "Web UI entry point")
    Component(apiPort, "API Port", "REST Interface", "API entry point")
    Component(healthPort, "Health Port", "Monitoring Interface", "Health check entry point")
    
    ' Application Core
    Container_Boundary(core, "Application Core") {
        ' Use Cases / Application Services
        Component(depositParcel, "Deposit Parcel Use Case", "Service", "Handle parcel deposits")
        Component(pickupParcel, "Pickup Parcel Use Case", "Service", "Handle parcel pickups")
        Component(manageLocker, "Manage Locker Use Case", "Service", "Locker operations")
        Component(managePIN, "Manage PIN Use Case", "Service", "PIN operations")
        Component(sendNotification, "Send Notification Use Case", "Service", "Notification operations")
        Component(adminOperations, "Admin Operations Use Case", "Service", "Administrative functions")
        Component(auditOperations, "Audit Operations Use Case", "Service", "Audit logging")
        
        ' Domain Entities
        Component(parcelEntity, "Parcel Entity", "Domain Model", "Parcel business rules")
        Component(lockerEntity, "Locker Entity", "Domain Model", "Locker business rules")
        Component(pinEntity, "PIN Entity", "Domain Model", "PIN business rules")
        Component(userEntity, "User Entity", "Domain Model", "User business rules")
        Component(notificationEntity, "Notification Entity", "Domain Model", "Notification rules")
        Component(auditEntity, "Audit Entity", "Domain Model", "Audit rules")
    }
    
    ' Secondary Ports (Driven)
    Component(persistencePort, "Persistence Port", "Repository Interface", "Data persistence abstraction")
    Component(emailPort, "Email Port", "Notification Interface", "Email notification abstraction")
    Component(auditPort, "Audit Port", "Logging Interface", "Audit logging abstraction")
    Component(cachePort, "Cache Port", "Caching Interface", "Cache operations abstraction")
}

' Primary Adapters (Driving)
Component(webAdapter, "Web Adapter", "Flask Routes", "Web interface implementation")
Component(apiAdapter, "API Adapter", "Flask API", "REST API implementation")
Component(healthAdapter, "Health Adapter", "Health Check", "Health monitoring implementation")

' Secondary Adapters (Driven)
Component(sqliteAdapter, "SQLite Adapter", "Database Implementation", "SQLite database operations")
Component(smtpAdapter, "SMTP Adapter", "Email Implementation", "Email sending via SMTP")
Component(auditLogAdapter, "Audit Log Adapter", "Logging Implementation", "File-based audit logging")
Component(redisAdapter, "Redis Adapter", "Cache Implementation", "Redis caching operations")

' External Systems
ContainerDb(mainDatabase, "Main Database", "SQLite", "Primary data storage")
ContainerDb(auditDatabase, "Audit Database", "SQLite", "Audit log storage")
Container_Ext(emailSystem, "Email System", "MailHog", "Email service")
Container_Ext(cacheSystem, "Cache System", "Redis", "Caching service")

' Primary Adapter Connections
Rel(webAdapter, webPort, "Implements")
Rel(apiAdapter, apiPort, "Implements")
Rel(healthAdapter, healthPort, "Implements")

' Port to Use Case Connections
Rel(webPort, depositParcel, "Triggers")
Rel(webPort, pickupParcel, "Triggers")
Rel(webPort, manageLocker, "Triggers")
Rel(webPort, adminOperations, "Triggers")

Rel(apiPort, depositParcel, "Triggers")
Rel(apiPort, pickupParcel, "Triggers")
Rel(apiPort, managePIN, "Triggers")
Rel(apiPort, sendNotification, "Triggers")
Rel(apiPort, auditOperations, "Triggers")

' Use Case to Entity Connections
Rel(depositParcel, parcelEntity, "Uses")
Rel(depositParcel, lockerEntity, "Uses")
Rel(pickupParcel, parcelEntity, "Uses")
Rel(pickupParcel, pinEntity, "Uses")
Rel(manageLocker, lockerEntity, "Uses")
Rel(managePIN, pinEntity, "Uses")
Rel(sendNotification, notificationEntity, "Uses")
Rel(adminOperations, userEntity, "Uses")
Rel(auditOperations, auditEntity, "Uses")

' Use Case to Secondary Port Connections
Rel(depositParcel, persistencePort, "Uses")
Rel(depositParcel, emailPort, "Uses")
Rel(depositParcel, auditPort, "Uses")
Rel(pickupParcel, persistencePort, "Uses")
Rel(pickupParcel, emailPort, "Uses")
Rel(pickupParcel, auditPort, "Uses")
Rel(manageLocker, persistencePort, "Uses")
Rel(managePIN, persistencePort, "Uses")
Rel(sendNotification, emailPort, "Uses")
Rel(adminOperations, persistencePort, "Uses")
Rel(adminOperations, cachePort, "Uses")
Rel(auditOperations, auditPort, "Uses")

' Secondary Port to Adapter Connections
Rel(persistencePort, sqliteAdapter, "Implemented by")
Rel(emailPort, smtpAdapter, "Implemented by")
Rel(auditPort, auditLogAdapter, "Implemented by")
Rel(cachePort, redisAdapter, "Implemented by")

' Adapter to External System Connections
Rel(sqliteAdapter, mainDatabase, "Connects to")
Rel(smtpAdapter, emailSystem, "Connects to")
Rel(auditLogAdapter, auditDatabase, "Connects to")
Rel(redisAdapter, cacheSystem, "Connects to")

@enduml

' ===================================================================
' C4 CODE DIAGRAM - DETAILED IMPLEMENTATION
' ===================================================================

@startuml C4_Code_Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Campus Locker System v2.0 - Code Level Implementation

Container_Boundary(implementation, "Code Implementation Structure") {
    
    ' Presentation Layer
    Package(presentation, "Presentation Layer") {
        Component(routes_py, "routes.py", "Flask Blueprint", "Web interface routes")
        Component(api_routes_py, "api_routes.py", "Flask Blueprint", "REST API endpoints")
        Component(health_py, "health.py", "Flask Route", "Health check endpoint")
    }
    
    ' Service Layer
    Package(services, "Service Layer") {
        Component(parcel_service_py, "parcel_service.py", "ParcelService class", "Parcel operations orchestration")
        Component(locker_service_py, "locker_service.py", "LockerService class", "Locker operations orchestration")
        Component(pin_service_py, "pin_service.py", "PINService class", "PIN operations orchestration")
        Component(notification_service_py, "notification_service.py", "NotificationService class", "Notification orchestration")
        Component(admin_service_py, "admin_service.py", "AdminService class", "Admin operations orchestration")
        Component(audit_service_py, "audit_service.py", "AuditService class", "Audit operations orchestration")
    }
    
    ' Business Layer
    Package(business, "Business Layer") {
        Component(parcel_domain_py, "parcel_domain.py", "ParcelDomain class", "Parcel business logic")
        Component(locker_domain_py, "locker_domain.py", "LockerDomain class", "Locker business logic")
        Component(pin_domain_py, "pin_domain.py", "PINDomain class", "PIN business logic")
        Component(notification_domain_py, "notification_domain.py", "NotificationDomain class", "Notification business logic")
        Component(admin_domain_py, "admin_domain.py", "AdminDomain class", "Admin business logic")
        Component(audit_domain_py, "audit_domain.py", "AuditDomain class", "Audit business logic")
    }
    
    ' Persistence Layer
    Package(persistence, "Persistence Layer") {
        Component(models_py, "models.py", "SQLAlchemy Models", "User, Locker, Parcel, PIN models")
        Component(database_py, "database.py", "Database Config", "Database connection and configuration")
    }
    
    ' Adapter Layer
    Package(adapters, "Adapter Layer") {
        Component(database_adapter_py, "database_adapter.py", "DatabaseAdapter class", "SQLite database operations")
        Component(email_adapter_py, "email_adapter.py", "EmailAdapter class", "SMTP email operations")
        Component(audit_adapter_py, "audit_adapter.py", "AuditAdapter class", "Audit logging operations")
    }
    
    ' Configuration
    Package(config, "Configuration") {
        Component(config_py, "config.py", "Config classes", "Application configuration")
        Component(env_file, ".env", "Environment variables", "Runtime configuration")
        Component(requirements_txt, "requirements.txt", "Dependencies", "Python package dependencies")
    }
    
    ' Testing
    Package(testing, "Testing Framework") {
        Component(test_parcel_py, "test_parcel.py", "PyTest", "Parcel functionality tests")
        Component(test_locker_py, "test_locker.py", "PyTest", "Locker functionality tests")
        Component(test_pin_py, "test_pin.py", "PyTest", "PIN functionality tests")
        Component(test_admin_py, "test_admin.py", "PyTest", "Admin functionality tests")
        Component(test_integration_py, "test_integration.py", "PyTest", "Integration tests")
        Component(conftest_py, "conftest.py", "PyTest Config", "Test configuration and fixtures")
    }
}

' Layer Dependencies
Rel(routes_py, parcel_service_py, "imports and uses")
Rel(routes_py, locker_service_py, "imports and uses")
Rel(routes_py, admin_service_py, "imports and uses")

Rel(api_routes_py, parcel_service_py, "imports and uses")
Rel(api_routes_py, pin_service_py, "imports and uses")
Rel(api_routes_py, notification_service_py, "imports and uses")
Rel(api_routes_py, audit_service_py, "imports and uses")

Rel(parcel_service_py, parcel_domain_py, "imports and uses")
Rel(locker_service_py, locker_domain_py, "imports and uses")
Rel(pin_service_py, pin_domain_py, "imports and uses")
Rel(notification_service_py, notification_domain_py, "imports and uses")
Rel(admin_service_py, admin_domain_py, "imports and uses")
Rel(audit_service_py, audit_domain_py, "imports and uses")

Rel(parcel_domain_py, models_py, "imports and uses")
Rel(locker_domain_py, models_py, "imports and uses")
Rel(pin_domain_py, models_py, "imports and uses")
Rel(admin_domain_py, models_py, "imports and uses")

Rel(models_py, database_adapter_py, "uses")
Rel(notification_domain_py, email_adapter_py, "uses")
Rel(audit_domain_py, audit_adapter_py, "uses")

Rel(database_adapter_py, config_py, "imports configuration")
Rel(email_adapter_py, config_py, "imports configuration")

' Test Dependencies
Rel(test_parcel_py, parcel_service_py, "tests")
Rel(test_locker_py, locker_service_py, "tests")
Rel(test_pin_py, pin_service_py, "tests")
Rel(test_admin_py, admin_service_py, "tests")
Rel(test_integration_py, routes_py, "tests")
Rel(test_integration_py, api_routes_py, "tests")

@enduml 